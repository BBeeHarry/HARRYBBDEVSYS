@*@model BBDEVSYS.ViewModels.Invoice.InvoiceViewModel*@
@{
    ViewBag.Title = "Home";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<br />

<div class="row">
    <div class="box box-danger col-xs-12">
        <div class="box-header with-border">
            <h3 class="box-title">@BBDEVSYS.Content.text.ResourceText.Dashboard Payment Fee</h3>
            <div class="box-tools pull-right">
                <button type="button" class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i></button>
            </div>
        </div>

        <div class="box-body">
            <div class="chart">
                <div id="Barchart"> </div>
            </div>
        </div>


    </div>

</div>
<div class="row">
    <div class="box box-danger col-xs-12">
        <div class="box-header with-border">
            <h3 class="box-title">@BBDEVSYS.Content.text.ResourceText.Dashboard Payment Fee by  Price Catalog</h3>
            <div class="box-tools pull-right">
                <button type="button" class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i></button>
            </div>
        </div>

        <div class="box-body">
            <div class="chart">
                <div id="BarchartChannels" style="max-height: 1000px; position: relative;" class="c3"></div>

            </div>
            <div class="chart">
                <div id="BarchartCompany" style="max-height: 1000px; position: relative;" class="c3"></div>
            </div>
        </div>


    </div>


</div>
@*<div class="row">
     <div class="box box-danger col-xs-12">
        <div class="box-header with-border">
            <h3 class="box-title">@BBDEVSYS.Content.text.ResourceText.Dashboard Payment Fee by  Company</h3>
            <div class="box-tools pull-right">
                <button type="button" class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i></button>
            </div>
        </div>

        <div class="box-body">
            <div class="chart">
                <div id="DonutCompany" style="max-height: 1000px; position: relative;" class="c3"></div>
            </div>
        </div>


    </div>


            <div class="col-xs-12">
                <div class="box-header with-border">
                    <h3 class="box-title">@BBDEVSYS.Content.text.ResourceText.Dashboard</h3>
                </div>

                <div class="box-body">


                    <div><img src='@Url.Action("BarChartColumn","Home")' alt="Chart" /></div>
                </div>

            </div>

        </div>
    <div class="row">
        <div class="col-xs-12">
            <div class="box-header with-border">
                <h3 class="box-title">@BBDEVSYS.Content.text.ResourceText.Dashboard</h3>
            </div>
            <div class="box-body">
                <div class="row">
                    <div class="col-xs-12">
                        <div style="position:relative">

                            <div id="chartContainer"></div>
                        </div>

                    </div>
                </div>
            </div>

        </div>

    </div>*@
@*@{
        var myChart = new Chart(width: 600, height: 400)
            .AddTitle("Chart Title")
            .AddSeries(
                name: "Employee",
                xValue: new[] { "Peter", "Andrew", "Julie", "Mary", "Dave" },
                yValues: new[] { "2", "6", "4", "5", "3" })
            .Write();
    }*@

<script type="text/javascript">
    function getBarchart() {
        var url = '@Url.Action("BarChart", "Home")';
        $.ajax({
            type: "GET",
            url: url,//"~/Home/BarChart",
            data: {},
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                dashboardBarChart(response);
                //dataPointsChartBarStackCol(response);
            },
        });
    }

    function getBarchartChannels() {
        var url = '@Url.Action("BarChartChannels", "Home")';
        $.ajax({
            type: "GET",
            url: url,
            data: {},
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                dashboardBarChartChannels(response);
                dashboardBarChartbyChannels(response);
            },
        });
    }
    function getBarchartCompany() {
        var url = '@Url.Action("BarChartCompany", "Home")';
        $.ajax({
            type: "GET",
            url: url,
            data: {},
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                dashboardBarChartCompany(response);
            },
        });
    }

    function dashboardBarChart(jsondata) {
        var colName = [];

        //jsondata.length
        for (var i = 0; i < jsondata.length; i++) {
            colName.push(jsondata[i].MonthNameFee);
        }

        var chart = c3.generate({
            bindto: '#Barchart',
            title: {
                text: "Payment Fee "
            },
            zoom: {
                enabled: true
            },
            size: {
                height: 500,
                width: 900
            },
            data: {
                json: jsondata,
                keys: {
                    text: ['Actual', 'Accrued'],
                    value: ['Actual', 'Accrued']
                },
                columns: ['Actual', 'Accrued'],
                //names: {
                //    MonthFee: 'Total'
                //},
                type: 'bar',
                groups: [
                    ['Actual', 'Accrued']//, 'MonthFee']
                ]
            },
            axis: {
                x: {
                    label: {
                        text: 'Period Month/Year',
                        position: 'outer-center',
                    },
                    type: 'category',
                    categories: colName,//['MA', 'ME', 'NY', 'CN', 'TX'],
                    tick: {
                        centered: true
                    }
                },
                y: {
                    label: {
                        text: 'percentage Amount Excld. VAT (%)',
                        position: 'outer-middle'
                    },
                    max: 100,
                    min: 0,
                    padding: {
                        top: 0,
                        bottom: 0
                    }
                }
            },
            //legend: {
            //    show: true
            //},
            color: {
                pattern: ['#ea3861', '#f7bf4f', '#d62728', '#f7bcb9', '#1f77b4', '#aec7e8', '#ff7f0e', '#ffbb78', '#2ca02c', '#98df8a', '#9467bd', '#c5b0d5', '#8c564b', '#c49c94', '#e377c2', '#f7b6d2', '#7f7f7f', '#c7c7c7', '#bcbd22', '#dbdb8d', '#17becf', '#9edae5']

                //pattern: ['#1f77b4', '#aec7e8', '#ff7f0e', '#ffbb78', '#2ca02c', '#98df8a', '#d62728', '#ff9896', '#9467bd', '#c5b0d5', '#8c564b', '#c49c94', '#e377c2', '#f7b6d2', '#7f7f7f', '#c7c7c7', '#bcbd22', '#dbdb8d', '#17becf', '#9edae5']
            },
        });

        //setTimeout(function () {
        //    chart.data.colors({
        //        Actual: d3.rgb('#d62728').darker(1),
        //        Accrued: d3.rgb('#ff9896').darker(1),
        //    });
        //}, 1000);

        //setTimeout(function () {
        //    chart.data.colors({
        //        Actual: d3.rgb('#d62728').darker(2),
        //        Accrued: d3.rgb('#ff9896').darker(2),
        //    });
        //}, 2000);
        setTimeout(function () {
            chart.transform('line');
        }, 3000);
        setTimeout(function () {
            chart.transform('bar', 'Actual');
        }, 4000);

        setTimeout(function () {
            chart.transform('bar', 'Accrued');
        }, 7000);
        setTimeout(function () {
            chart.transform('area');
        }, 9000);
        setTimeout(function () {
            chart.transform('pie');
        }, 13000);
        setTimeout(function () {
            chart.transform('bar');
        }, 15000);



    }

    function dashboardBarChartChannels(jsondata) {
        var colName = [];

        //jsondata.length
        for (var i = 0; i < jsondata.length; i++) {
            colName.push(jsondata[i].PriceCatalog);
        }

        var chart = c3.generate({
            bindto: '#BarchartChannels',
            title: {
                text: "Payment Fee by Channels"
            },
            zoom: {
                enabled: true
            },
            //padding: {
            //    top: 40,
            //    right: 100,
            //    bottom: 40,
            //    left: 100,
            //},
            size: {
                height: 600,
                width: 900
            },
            data: {
                json: jsondata,
                keys: {
                    text: ['Actual', 'Accrued'],
                    value: ['Actual', 'Accrued']
                },
                columns: ['Actual', 'Accrued'],
                type: 'bar',
                groups: [
                    ['Actual', 'Accrued']
                ],
                order: 'asc',
            },
            axis: {

                rotated: true,
                x: {
                    label: {
                        text: 'Price Catalog',
                        position: 'outer-center',
                    },
                    //label :'Price Catalog',
                    type: 'category',
                    categories: colName,
                    tick: {
                        // centered:true,
                        rotate: 25,
                        multiline: false
                    },
                    height: 130
                },
                y: {
                    label: {
                        text: 'percentage Amount Excld. VAT (%)',
                        position: 'outer-middle'
                    },
                    max: 100,
                    min: 0,
                    padding: {
                        top: 0,
                        bottom: 0
                    }
                }
            },
            legend: {
                show: true,
                position: 'right'
            },
            color: {
                pattern: ['#6782f7', '#d899e8', '#d62728', '#ff9896', '#1f77b4', '#aec7e8', '#ff7f0e', '#ffbb78', '#2ca02c', '#98df8a', '#9467bd', '#c5b0d5', '#8c564b', '#c49c94', '#e377c2', '#f7b6d2', '#7f7f7f', '#c7c7c7', '#bcbd22', '#dbdb8d', '#17becf', '#9edae5']

                //pattern: ['#1f77b4', '#aec7e8', '#ff7f0e', '#ffbb78', '#2ca02c', '#98df8a', '#d62728', '#ff9896', '#9467bd', '#c5b0d5', '#8c564b', '#c49c94', '#e377c2', '#f7b6d2', '#7f7f7f', '#c7c7c7', '#bcbd22', '#dbdb8d', '#17becf', '#9edae5']
            },
        });


        setTimeout(function () {
            chart.transform('line');
        }, 3000);
        setTimeout(function () {
            chart.transform('bar', 'Actual');
        }, 4000);

        setTimeout(function () {
            chart.transform('bar', 'Accrued');
        }, 7000);
        setTimeout(function () {
            chart.transform('area');
        }, 9000);
        setTimeout(function () {
            chart.transform('pie');
        }, 13000);
        setTimeout(function () {
            chart.transform('bar');
        }, 15000);

        //setTimeout(function () {
        //    chart.transform('donut');
        //}, 20000);

        //setTimeout(function () {
        //    chart.groups([['Actual', 'Accrued']])
        //}, 20000);




    }

    function dashboardBarChartbyChannels(jsondata) {
        var colName = [];
        var colAct = [];
        var colAcc = [];

        for (var i = 0; i < jsondata.length; i++) {
            colName.push(jsondata[i].PriceCatalog);
            colAct.push(jsondata[i].Actual);
            colAcc.push(jsondata[i].Accrued);
        }

        var chart = c3.generate({
            bindto: '#BarchartCompany',
            title: {
                text: "Payment Fee by Company"
            },
            size: {
                height: 680,
                width: 900
            },
            data: {
                //json: jsondata,
                //keys: {
                //x: 'PriceCatalog',
                //text: ['Actual', 'Accrued'],
                //value: ['Actual', 'Accrued']
                //},
                //columns: ['Actual', 'Accrued'],
                type: 'bar',
                onclick: function (d, i) { console.log("onclick", d, i); },
                onmouseover: function (d, i) { console.log("onmouseover", d, i); },
                onmouseout: function (d, i) { console.log("onmouseout", d, i); },
                //groups: [
                //    colName
                //],
                rows: [
                   colName,
                   colAct,
                   colAcc
                ],
                order: 'asc',
            },
            axis: {

                //rotated: true,
                x: {
                    label: {
                        text: 'Price Catalog',
                        position: 'outer-center',
                    },
                    label: 'Price Catalog',
                    type: 'category',
                    categories: ['Actual', 'Accrued'],
                    tick: {
                        centered: true,
                        //rotate: 25,
                        //multiline: false
                    },
                    //height: 130
                },
                y: {
                    label: {
                        text: 'percentage Amount Excld. VAT (%)',
                        position: 'outer-middle'
                    },
                    max: 100,
                    min: 0,
                    padding: {
                        top: 0,
                        bottom: 0
                    }
                }
            },
            legend: {
                show: true,
                position: 'right'
            },
            color: {
                pattern: ['#1f77b4', '#aec7e8', '#ff7f0e', '#ffbb78', '#2ca02c', '#98df8a', '#d62728', '#ff9896', '#9467bd', '#c5b0d5', '#8c564b', '#c49c94', '#e377c2', '#f7b6d2', '#7f7f7f', '#c7c7c7', '#bcbd22', '#dbdb8d', '#17becf', '#9edae5']


                //pattern: ['#1f77b4', '#aec7e8', '#ff7f0e', '#ffbb78', '#2ca02c', '#98df8a', '#d62728', '#ff9896', '#9467bd', '#c5b0d5', '#8c564b', '#c49c94', '#e377c2', '#f7b6d2', '#7f7f7f', '#c7c7c7', '#bcbd22', '#dbdb8d', '#17becf', '#9edae5']
            },
        });


        //setTimeout(function () {
        //    chart.transform('area');
        //}, 1000);
        //setTimeout(function () {
        //    chart.transform('pie');
        //}, 3000);
        //setTimeout(function () {
        //    chart.transform('bar');
        //}, 5000);
    }

    function dashboardBarChartCompany(jsondata) {
        var colName = [];
        var colAct = [];
        var colAcc = [];
        var colCom = [];
        var colTotal = [];

        for (var i = 0; i < jsondata.length; i++) {
            colName.push(jsondata[i].PriceCatalog);
            colAct.push(jsondata[i].Actual);
            colAcc.push(jsondata[i].Accrued);
            colCom.push(jsondata[i].Company);
            colTotal.push(jsondata[i].Total);
        }
        console.log(colName)
        console.log(colAct)
        var chart = c3.generate({
            bindto: '#DonutCompany',
            title: {
                text: "Payment Fee by Company"
            },

            data: {
                //json: jsondata,
                //keys: {
                //x: 'PriceCatalog',
                //text: ['Actual', 'Accrued'],
                //value: ['Actual', 'Accrued']
                //},
                //columns: ['Actual', 'Accrued'],
                type: 'donut',
                onclick: function (d, i) { console.log("onclick", d, i); },
                onmouseover: function (d, i) { console.log("onmouseover", d, i); },
                onmouseout: function (d, i) { console.log("onmouseout", d, i); },
                //groups: [
                //    colName
                //],
                rows: [
                   colName,
                   colAct
                ],
                //order: 'asc',
            },
            donut: {
                title: 'TI',
            },
            //axis: {
            //    //rotated: true,
            //    x: {
            //        label: {
            //            text: 'Price Catalog',
            //            position: 'outer-center',
            //        },
            //        label: 'Price Catalog',
            //        type: 'category',
            //        categories: colCom,
            //        tick: {
            //            centered: true,
            //            //rotate: 25,
            //            //multiline: false
            //        },
            //        //height: 130
            //    },
            //    y: {
            //        label: {
            //            text: 'percentage Amount Excld. VAT (%)',
            //            position: 'outer-middle'
            //        },
            //        max: 100,
            //        min: 0,
            //        padding: {
            //            top: 0,
            //            bottom: 0
            //        }
            //    }
            //},
            legend: {
                show: true,
                position: 'right'
            },
            color: {
                pattern: ['#6782f7', '#d899e8', '#d62728', '#ff9896', '#1f77b4', '#aec7e8', '#ff7f0e', '#ffbb78', '#2ca02c', '#98df8a', '#9467bd', '#c5b0d5', '#8c564b', '#c49c94', '#e377c2', '#f7b6d2', '#7f7f7f', '#c7c7c7', '#bcbd22', '#dbdb8d', '#17becf', '#9edae5']
            },
        });
    }


    columnColors = ['#9a4d6f', '#c76c47', '#f85115', '#d9b099', '#d4ba2f'];
    function designerChart(jsondata) {
        var chart = c3.generate({
            bindto: '#designerChart',
            data: {
                columns: [
                  ['rainfall', 6, 8, 6, 5, 4]
                ],
                type: 'bar'
            },
            axis: {
                x: {
                    label: {
                        text: 'States',
                        position: 'outer-center',
                    },
                    type: 'category',
                    categories: ['MA', 'ME', 'NY', 'CN', 'TX'],
                    tick: {
                        centered: true
                    }
                },
                y: {
                    label: {
                        text: 'Rainfall (inches)',
                        position: 'outer-middle'
                    },
                    max: 10,
                    min: 0,
                    padding: {
                        top: 0,
                        bottom: 0
                    }
                }
            },
            legend: {
                show: false
            }
        });

    }

    function setColumnBarColors(colors, chartContainer) {

        $('#' + chartContainer + ' .c3-chart-bars .c3-shape').each(function (index) {
            this.style.cssText += 'fill: ' + colors[index] + ' !important; stroke: ' + colors[index] + '; !important';
        });

        $('#' + chartContainer + ' .c3-chart-texts .c3-text').each(function (index) {
            this.style.cssText += 'fill: ' + colors[index] + ' !important;';
        });
    }





    function dataPointsChartBarStackCol(jsondata) {


        var dataPoints1 = [];
        var dataPoints2 = [];

        //jsondata.length
        for (var i = 0; i < 10; i++) {
            dataPoints1.push({ y: jsondata[i].Actual, label: jsondata[i].MonthNameFee });
            dataPoints2.push({ y: jsondata[i].Accrued, label: jsondata[i].MonthNameFee });
        }

        //$.each(jsondata, function (i, res) {
        //    dataPoints1.push({ label: res.MonthNameFee, y: res.Actual });
        //    dataPoints2.push({ label: res.MonthNameFee, y: res.Accrued });
        //});
        var chart = new CanvasJS.Chart("chartContainer", {
            animationEnabled: true,
            title: {
                text: "Payment Fee"
            },
            axisX: {
                title: "Period Month/Year"
            },
            axisY: {
                title: "percentage Amount"
            },
            data: [
            {
                type: "stackedColumn100",
                legendText: "Actual",
                //showInLegend: "true",
                indexLabel: "#percent %",
                indexLabelPlacement: "outside",
                indexLabelFontColor: "white",
                dataPoints: dataPoints1,
                //dataPoints: [
                //{ y: 40, label: "Cafeteria" },
                //{ y: 10, label: "Lounge" },
                //{ y: 72, label: "Games Room" },
                //{ y: 30, label: "Lecture Hall" },
                //{ y: 21, label: "Library" },
                //{ y: 40, label: "Cafeteria" },
                //{ y: 10, label: "Lounge" },
                //{ y: 72, label: "Games Room" },
                //{ y: 30, label: "Lecture Hall" },
                //{ y: 21, label: "Library" },
                //{ y: 40, label: "Cafeteria" },
                //{ y: 10, label: "Lounge" },
                //{ y: 72, label: "Games Room" },
                //{ y: 30, label: "Lecture Hall" },
                //{ y: 21, label: "Library" }
                //],

                //You can add dynamic data from the controller as shown below. Check the controller and uncomment the line which generates dataPoints.
                //dataPoints: @Html.Raw(ViewBag.DataPoints1),
            },
            {
                type: "stackedColumn100",
                legendText: "Accrued",
                //showInLegend: "true",
                indexLabel: "#percent %",
                indexLabelPlacement: "outside",
                indexLabelFontColor: "white",
                dataPoints: dataPoints1,
                //dataPoints: [dataPoints1
                //{ y: 20, label: "Cafeteria" },
                //{ y: 14, label: "Lounge" },
                //{ y: 40, label: "Games Room" },
                //{ y: 43, label: "Lecture Hall" },
                //{ y: 17, label: "Library" },
                // { y: 20, label: "Cafeteria" },
                //{ y: 14, label: "Lounge" },
                //{ y: 40, label: "Games Room" },
                //{ y: 43, label: "Lecture Hall" },
                //{ y: 17, label: "Library" },
                // { y: 20, label: "Cafeteria" },
                //{ y: 14, label: "Lounge" },
                //{ y: 40, label: "Games Room" },
                //{ y: 43, label: "Lecture Hall" },
                //{ y: 17, label: "Library" }
                // ],

                //You can add dynamic data from the controller as shown below. Check the controller and uncomment the line which generates dataPoints.
                //dataPoints: @Html.Raw(ViewBag.DataPoints2),
            }
            ]
        });
        chart.render();

    }

    function dataPointsChartBarCol() {

        var chart = new CanvasJS.Chart("chartContainer", {
            theme: "dark2",//"light2",
            animationEnabled: true,
            title: {
                text: "Column Chart in ASP.Net MVC using CanvasJS"
            },
            data: [
            {
                type: "column",
                dataPoints: [
                    { y: 6, label: "Apple" },
                    { y: 4, label: "Mango" },
                    { y: 5, label: "Orange" },
                    { y: 7, label: "Banana" },
                    { y: 4, label: "Pineapple" },
                    { y: 6, label: "Pears" },
                    { y: 7, label: "Grapes" },
                    { y: 5, label: "Lychee" },
                    { y: 4, label: "Jackfruit" }
                ],

                //You can add dynamic data from the controller as shown below. Check the controller and uncomment the line which generates dataPoints.
                //dataPoints: @Html.Raw(ViewBag.DataPoints),
            }
            ]
        });
        chart.render();
    }

    $(document).ready(function () {
        getBarchart();
        getBarchartChannels();
        //getBarchartCompany();


        //dataPointsChartBarCol();
        //setColumnBarColors(columnColors, 'designerChart');

        //// Color turns to original when window is resized
        //// To handle that
        //$(window).resize(function() {
        //    setColumnBarColors(columnColors, 'designerChart');
        //});
    });

</script>
<style>
    .datatable-inv {
        background-color: #f1f444;
    }
</style>


